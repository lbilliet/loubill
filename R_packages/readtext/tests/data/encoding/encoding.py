#!/usr/bin/env python3

import unicodedata
import csv
import itertools

r_encodings = {
    'ANSI_X3.4-1968',
    'UTF-8',
    'UTF-8-MAC',
    'ISO-10646-UCS-2',
    'UCS-2BE',
    'UCS-2LE',
    'ISO-10646-UCS-4',
    'UCS-4BE',
    'UCS-4LE',
    'UTF-16',
    'UTF-16BE',
    'UTF-16LE',
    'UTF-32',
    'UTF-32BE',
    'UTF-32LE',
    'UNICODE-1-1-UTF-7',
    'UCS-2-INTERNAL',
    'UCS-2-SWAPPED',
    'UCS-4-INTERNAL',
    'UCS-4-SWAPPED',
    'C99',
    'JAVA',
    'CP819',
    'ISO-8859-2',
    'ISO-8859-3',
    'ISO-8859-4',
    'CYRILLIC',
    'ARABIC',
    'ECMA-118',
    'HEBREW',
    'ISO-8859-9',
    'ISO-8859-10',
    'ISO-8859-11',
    'ISO-8859-13',
    'ISO-8859-14',
    'ISO-8859-15',
    'ISO-8859-16',
    'KOI8-R',
    'KOI8-U',
    'KOI8-RU',
    'CP1250',
    'CP1251',
    'CP1252',
    'CP1253',
    'CP1254',
    'CP1255',
    'CP1256',
    'CP1257',
    'CP1258',
    '850',
    '862',
    '866',
    'MAC',
    'MACCENTRALEUROPE',
    'MACICELAND',
    'MACCROATIAN',
    'MACROMANIA',
    'MACCYRILLIC',
    'MACUKRAINE',
    'MACGREEK',
    'MACTURKISH',
    'MACHEBREW',
    'MACARABIC',
    'MACTHAI',
    'HP-ROMAN8',
    'NEXTSTEP',
    'ARMSCII-8',
    'GEORGIAN-ACADEMY',
    'GEORGIAN-PS',
    'KOI8-T',
    'CP154',
    'MULELAO-1',
    'CP1133',
    'ISO-IR-166',
    'CP874',
    'VISCII',
    'TCVN',
    'ISO-IR-14',
    'JISX0201-1976',
    'ISO-IR-87',
    'ISO-IR-159',
    'CN',
    'CHINESE',
    'CN-GB-ISOIR165',
    'ISO-IR-149',
    'EUC-JP',
    'MS_KANJI',
    'CP932',
    'ISO-2022-JP',
    'ISO-2022-JP-1',
    'ISO-2022-JP-2',
    'CN-GB',
    'GBK',
    'CP936',
    'GB18030',
    'ISO-2022-CN',
    'ISO-2022-CN-EXT',
    'HZ',
    'EUC-TW',
    'BIG-5',
    'CP950',
    'BIG5-HKSCS:1999',
    'BIG5-HKSCS:2001',
    'BIG5-HKSCS',
    'EUC-KR',
    'CP949',
    'CP1361',
    'ISO-2022-KR',
    'CP856',
    'CP922',
    'CP943',
    'CP1046',
    'CP1124',
    'CP1129',
    'CP1161',
    'CP1162',
    'CP1163',
    'DEC-KANJI',
    'DEC-HANYU',
    '437',
    'CP737',
    'CP775',
    '852',
    'CP853',
    '855',
    '857',
    'CP858',
    '860',
    '861',
    '863',
    'CP864',
    '865',
    '869',
    'CP1125',
    'EUC-JISX0213',
    'SHIFT_JISX0213',
    'ISO-2022-JP-3',
    'BIG5-2003',
    'ISO-IR-230',
    'ATARI',
    'RISCOS-LATIN1'
}
unsupported_encodings = {
    'UTF-8-MAC',
    'ISO-10646-UCS-2',
    'UCS-2BE',
    'UCS-2LE',
    'ISO-10646-UCS-4',
    'UCS-4BE',
    'UCS-4LE',
    'UCS-2-INTERNAL',
    'UCS-2-SWAPPED',
    'UCS-4-INTERNAL',
    'UCS-4-SWAPPED',
    'C99',
    'JAVA',
    'KOI8-RU',
    'MAC',
    'MACCROATIAN',
    'MACROMANIA',
    'MACUKRAINE',
    'MACHEBREW',
    'MACARABIC',
    'MACTHAI',
    'NEXTSTEP',
    'ARMSCII-8',
    'GEORGIAN-ACADEMY',
    'GEORGIAN-PS',
    'MULELAO-1',
    'CP1133',
    'VISCII',
    'TCVN',
    'ISO-IR-14',
    'JISX0201-1976',
    'ISO-IR-87',
    'ISO-IR-159',
    'CN',
    'CN-GB-ISOIR165',
    'ISO-IR-149',
    'CN-GB',
    'ISO-2022-CN',
    'ISO-2022-CN-EXT',
    'EUC-TW',
    'BIG-5',
    'BIG5-HKSCS:1999',
    'BIG5-HKSCS:2001',
    'CP922',
    'CP943',
    'CP1046',
    'CP1124',
    'CP1129',
    'CP1161',
    'CP1162',
    'CP1163',
    'DEC-KANJI',
    'DEC-HANYU',
    'CP853',
    'BIG5-2003',
    'ISO-IR-230',
    'ATARI',
    'RISCOS-LATIN1',
}
encodings = list(r_encodings - unsupported_encodings)


def valid_unicode_characters():
    # We're excluding control characters
    # For reasons unknown, R's readLines won't read characters below 0xa
    # It also interprets 0x13 as a newline, as it should
    for i in range(0, 0x110000):
        # if unicodedata.category(chr(i)) not in {0, 'Cn', 'Cs', 'Cc'}:
        # This is an even more restrictive version that only includes some
        #  classes of characters
        if unicodedata.category(chr(i))[0] in {'L', 'M', 'N', 'P', 'S'}:
            yield chr(i)


def encodable_unicode_characters(encoding):
    for c in valid_unicode_characters():
        try:
            c.encode(encoding)
            yield c
        except UnicodeEncodeError:
            pass
        except LookupError:
            print(encoding)


for e in encodings:
    encodable = list(encodable_unicode_characters(e))
    open('encoding_tests/%s__characters.txt' %
         e, 'wb').write(''.join(encodable).encode(e))
    out = csv.writer(open('encoding_tests/%s__bytes.tsv' % e, 'w'))
    for c in encodable:
        for b in c.encode('utf-8'):
            # out.writerow([str(hex(b))[2:]])
            out.writerow([str(b)])
