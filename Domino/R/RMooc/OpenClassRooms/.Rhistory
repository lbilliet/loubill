scan()#demandera différentes variables à la suite, comme si création de vecteur en attente de contenu
12-04-1989
12/04/1989
scan()#demandera différentes variables à la suite, comme si création de vecteur en attente de contenu
scan()#demandera différentes variables à la suite, comme si création de vecteur en attente de contenu
scan(nmax=2)#ici contraintes sur nb max de contenu du vecteur = 2
scan(nmax=4)#ici contraintes sur dimension max de contenu du vecteur = 2
paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
age<-28
prenom<-"Louis"
paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
nchar(phrase)
phraseMaj<-toupper(phrase)
subPhrase<-substr(phrase, 12, 33)
subPhrase
toupper(substr(variable,2,(nchar(variable)-1)))
variable<-"Bonjour"
toupper(substr(variable,2,(nchar(variable)-1)))
getwd()
setwd(~\OneDrive\not_sync\git\RMooc)
setwd(\OneDrive\not_sync\git\RMooc)
setwd(OneDrive\not_sync\git\RMooc)
chemRepTr<-getwd()
chemRepTr
grep(lb3, chemRepTr)
grep("lb3", chemRepTr)
resRchYaf<-grep("lb3", chemRepTr)
resRchYaf
resRchTourLin<-grep("usr", chemRepTr)
resRchTourLin
getwd()
setwd("C:/Users/lb3/OneDrive/not_sync/git")
rm(list())
resRchYaf<-grep("lb3", chemRepTr, ignore.case = T)
resRchTourLin<-grep("usr", chemRepTr, ignore.case = T)
chemRepTr<-getwd()
getwd()
resRchYaf<-grep("lb3", chemRepTr, ignore.case = T)
resRchTourLin<-grep("usr", chemRepTr, ignore.case = T)
if (resRchYaf==1) {
setwd("C:/Users/lb3/OneDrive/not_sync/git")
} else if (resRchTourLin==1) {
setwd("usr/git")
}
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
chemRepTr<-getwd()
getwd()
resRchYaf<-grep("lb3", chemRepTr, ignore.case = T)
resRchTourLin<-grep("usr", chemRepTr, ignore.case = T)
if (resRchYaf==1) {
setwd("C:/Users/lb3/OneDrive/not_sync/git")
} else if (resRchTourLin==1) {
setwd("usr/git")
}
chemRepTr
resRchYaf
setwd("C:/Users/lb3/OneDrive/not_sync/git")
getwd()
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
chemRepTr<-getwd()
resRchYaf<-grep("lb3", chemRepTr, ignore.case = T)
resRchTourLin<-grep("usr", chemRepTr, ignore.case = T)
setwd("C:/Users/lb3/OneDrive/not_sync/git")
if (resRchYaf==1) {
setwd("C:/Users/lb3/OneDrive/not_sync/git")
} else if (resRchTourLin==1) {
setwd("usr/git")
}
getwd()
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
sink("test export.txt")
sink("test export.txt")#redirige résultats vers un fichier de sortie
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
sink("test export.txt")#redirige résultats vers un fichier de sortie
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
sink()#redirige vers écran
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
phrase
sink("test export.txt")#redirige résultats vers un fichier de sortie
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
phrase
sink()#redirige résultats vers console
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
phrase
phrase
sink()#redirige résultats vers console
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
phrase
phrase
sink(NULL)
age<-28
prenom<-"Louis"
phrase<-paste("Je m\'appelle", prenom, "et j\'ai", age, "ans.", sep = " ")
phrase
nombre_depart <- 0
# Et on y applique différentes opérations. Vous devez normalement toutes les connaitre
print("Traitement")
nb<-0
res <- nb + 10
res <- cos(sin(res))
res <- res ^ res
res <- log2(res)
res <- sqrt(((res * 10) / (res + 5)) * -5)
# On a fini nos différents traitements et on enregistre le résultat dans un fichier externe
print("Sauvegarde")
save(res, file="donnees/res.RData")
save(res, file="res.RData")
load("C:/Users/lb3/OneDrive/not_sync/git/RMooc/res.RData")
res <- (cos(sin(res)))^(cos(sin(res)))
res <- (cos(sin(nb+10)))^(cos(sin(nb+10)))
resultat<-load("C:/Users/lb3/OneDrive/not_sync/git/RMooc/res.RData")#charge la valeur de la variable res dans l'envrionnement de travail
resultat
# On charge la variable que l'on avait précédemment enregistrée
load("donnees/res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
# On lance le premier script qui enregistre la variable resultat
source("test type variable.R")
rm(resultat)
# Et on la réimporte dans le second script
source("analyser_resultat.R")
source("gener_resultat.R")
rm(resultat)
rm(res)
source("analyser_resultat.R")
# On charge la variable que l'on avait précédemment enregistrée
load("donnees/res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
# On charge la variable que l'on avait précédemment enregistrée
load("donnees/res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
# On charge la variable que l'on avait précédemment enregistrée
load("donnees/res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
load("res.RData")
# On charge la variable que l'on avait précédemment enregistrée
load("res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
# On charge la variable que l'on avait précédemment enregistrée
load("res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
# On charge la variable que l'on avait précédemment enregistrée
load("res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
# On charge la variable que l'on avait précédemment enregistrée
load("res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
load("res.RData")
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
load("res.RData")
nouveau_resultat <- (res + 3)^4
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
# On charge la variable que l'on avait précédemment enregistrée
load("res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
# On charge la variable que l'on avait précédemment enregistrée
load("res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
# On charge la variable que l'on avait précédemment enregistrée
load("res.RData")
# Et on y applique un nouveau traitement
nouveau_resultat <- (res + 3)^4
nouveau_resultat <-  sqrt(nouveau_resultat)
print(paste("Le nouveau résultat est: ", nouveau_resultat, sep=""))
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
nb<-0
res <- (cos(sin(nb+10)))^(cos(sin(nb+10)))
print("Sauvegarde")
save(res, file="res.RData")#on a sauvegardé ici la variable res spécifiquement
# On lance le premier script qui enregistre la variable resultat
source("gener_resultat.R")
# On efface cette variable
rm(res)
# Et on la réimporte dans le second script
source("analyser_resultat.R")
# On lance le premier script qui enregistre la variable resultat
source("gener_resultat.R")
# On efface cette variable
rm(res)
# Et on la réimporte dans le second script
source("analyser_resultat.R")
# On lance le premier script qui enregistre la variable resultat
source("gener_resultat.R")
# On efface cette variable
rm(res)
# Et on la réimporte dans le second script
source("analyser_resultat.R")
vector("logical", 8)
vector("character", 5)
vector("numeric", 10)#num default = 0
vector()
vector(length = 10)#crée vec bool lg 10
numeric(10)
numVec
numVec<-vector("numeric", 10)#num default = 0
numVec
numVec<-99:18
numVec
numVec
rm(numVec)
numVec
numVec<-vector("numeric", 10)#num default = 0
numVec<-99:85
numVec
print(numVec<-99:85)
numVec
numVec<-vector("numeric", 10)#num default = 0
numVec
print(numVec<-99:85)
numVec
print(numVec<-rep(42,8))
print(numVec<-rep("42",8))
print(numVec<-rep("h2g2",8))
print(numVec<-seq(42,10))
print(strVec<-rep("h2g2",8))#répétition 8 fois du string
print(numVec<-seq(42,42))
print(numVec<-seq(42,666))
print(numVec<-seq(42,666,42))#ici dernier argument = le pas
print(numVec<-seq(42,52))
print(numVec<-seq(42,58))
print(numVec<-seq(42,33))#seq avec pas par défaut = 1
print(numVec<-seq(42,666,42))#ici dernier argument = le pas
names(numVec)
names(numVec)<-c("la réponse à tout ce qui est","idem+42","idemBis+42")
print(names(numVec)<-c("la réponse à tout ce qui est","idem+42","idemBis+42"))
numVec
print(names(numVec)<-c("la réponse à tout ce qui est","idem+42","idemBis+42","idemTer+42"))
numVec
numVec
names(numVec)<-c("la réponse à tout ce qui est","idem+42","idemBis+42","idemTer+42")
numVec
numvec[c("la réponse à tout ce qui est",2,"idemTer+42")]
numVec[c("la réponse à tout ce qui est",2,"idemTer+42")]
numVec[c(2,4)]
numVec[c("la réponse à tout ce qui est","idemTer+42")]
numVec[c(2,4)]
numVecRep<-numVec[rep(8,5)]
print(numVecRep<-numVec[rep(8,5)])
print(numVec[-(30:4)])
vecteur2 <- c(1:12, 8:5, rep(2,4), 8:15, 16:12)
vecteur2>7
vecteur2[vecteur2>7]
print(vectSup7<-vecteur2[vecteur2>7])#sélectionne uniquement les valeurs >7 du vecteur initial
vecteur2[vecteur2>7]<-666
print(vecteur2[vecteur2>7]<-666)
vecteur2 <- c(1:12, 8:5, rep(2,4), 8:15, 16:12)
print(vecteur2[vecteur2>7]<-666)
vecteur2 <- c(1:12, 8:5, rep(2,4), 8:15, 16:12)
vecteur2
print(vecteur2[vecteur2>7]<-c(42,666,1024,2048,4069))
print(vecteur2[vecteur2>7]<-c(42,666))
print(vecteur2[vecteur2>7]<-c(42,666,1024))
print(vectSup7<-vecteur2[vecteur2>7])#sélectionne uniquement les valeurs >7 du vecteur initial
length(vectSup7)
vecteur2 <- c(1:12, 8:5, rep(2,4), 8:15, 16:11)
vecteur2>7#crée un vecteur booléen testant la proposition, de même longueur que le vecteur initial
print(vectSup7<-vecteur2[vecteur2>7])#sélectionne uniquement les valeurs >7 du vecteur initial
length(vectSup7)
print(vecteur2[vecteur2>7]<-c(42,666,1024,2048,4096))
print(vecteur2[vecteur2>7]<-c(42,666,1024,2048))
vecteur2 <- c(1:12, 8:5, rep(2,4), 8:15, 16:11)
vecteur2>7#crée un vecteur booléen testant la proposition, de même longueur que le vecteur initial
print(vectSup7<-vecteur2[vecteur2>7])#sélectionne uniquement les valeurs >7 du vecteur initial
length(vectSup7)
print(vecteur2[vecteur2>7]<-c(42,666,1024,2048))
print(vecteur2[vecteur2>7]<-c(42,666,1024))
vecteur2 <- c(1:12, 8:5, rep(2,4), 8:15, 16:11)
vecteur2>7#crée un vecteur booléen testant la proposition, de même longueur que le vecteur initial
print(vectSup7<-vecteur2[vecteur2>7])#sélectionne uniquement les valeurs >7 du vecteur initial
print(vecteur2[vecteur2>7]<-c(42,666,1024))
print(vecteur2[vecteur2>7]<-seq(42,666,166)
print(vecteur2[vecteur2>7]<-seq(42,666,166))
print(vecteur2[vecteur2>7]<-seq(42,666,166))
print(vecteur2[vecteur2>7]<-seq(42,666,66))
poids+1<-poids + 4
poids <- c(85,78,54,98,66,78,77,62,89,92,76,77,55,68,71,72,99,102,54,66,98,75,82,83,75)
poids+1<-poids + 4
poids\+1<-poids + 4
poidsPl1<-poids + 1
print(poidsPl1<-poids + 1)
print(poids+c(0,1,200))
print(poids+c(0,200))
length(poids)
print(poids+c(0,200,1000,5,500))
print(pdsEnLivresUnSurDeux<-poids*c(1,1/2))
print(length(poids<-poids[2:length(poids)])))
print(length(poids<-poids[2:length(poids)]))
print(length(poids<-poids[2:length(poids)]))
head(poidsPl1)#sélectionne les 6 permiers du vec
tail(poidsPl1)#sélectionne les 6 derniers du vec
head(poidsPl1, 9)#sélectionne les 9 permiers du vec car précisé
tail(poidsPl1, 13)#sélectionne les 13 derniers du vec
order(c("A","C","b","a","B"))
sort(c("A","C","b","a","B"))#prio maj puis alphabétique
sort(c(TRUE, FALSE, T, F))#prio FALSE pour booléens
sort(c("A","C","b","a","B"))#prio alpha puis min/maj
order(c("A","C","b","a","B"))
order(poids)
poids[order(poids)]
poids
rank(poids)
median(poids, na.rm = T)#argument pour évincer NA
quantile(poids, probs=seq(0,1,0.1))#ici ce sera des déciles vu la séq déterminant le pas
load("Chapitre7.RData")
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
load("Chapitre7.RData")
load("Chapitre7.RData")
ls()
list()
summary(var())
summary(var)
df<-load("Chapitre7.RData")
summary(df)
str(df)
df
str(df)
summary(df)
names(performanceF)
names(performanceG)
setwd("C:/Users/lb3/OneDrive/not_sync/git/RMooc")
df<-load("Chapitre7.RData")
str(df)
summary(df)
names(performanceF)
names(performanceG)
names(tailleF)
names(tailleG)
length(union(performanceF,tailleF))
union(performanceF,tailleF)
length(union(names(performanceF),names(tailleF)))
union(names(performanceF),names(tailleF))
nbTtl=lgG+lgF
lgG<-length(union(names(performanceG),names(tailleG)))
nbTtl=lgG+lgF
lgF<-length(union(names(performanceF),names(tailleF)))
union(names(performanceF),names(tailleF))
lgG<-length(union(names(performanceG),names(tailleG)))
nbTtl=lgG+lgF
print(nbTtl=lgG+lgF)
print(nbTtl<-lgG+lgF)
print(lg2ValF<-intersect(names(performanceF),names(tailleF)))
print(lg2ValG<-intersect(names(performanceG),names(tailleG)))
print(length(lg2ValF<-intersect(names(performanceF),names(tailleF))))
print(length(lg2ValG<-intersect(names(performanceG),names(tailleG))))
lgTtlF<-length(union(names(performanceF),names(tailleF)))
print(lgTtlG<-length(union(names(performanceG),names(tailleG))))
print(nbTtl<-lgTtlG+lgTtlF)
print(lgTtlF<-length(union(names(performanceF),names(tailleF))))
print(lgTtlG<-length(union(names(performanceG),names(tailleG))))
print(lg2val<-lg2ValF+lg2ValG)
print(lg2ValF<-length(intersect(names(performanceF),names(tailleF))))
print(lg2ValG<-length(intersect(names(performanceG),names(tailleG))))
print(lg2val<-lg2ValF+lg2ValG)
uniqueValF<-setdiff(names(performanceF),names(tailleF))
print(unqValF<-setdiff(names(performanceF),names(tailleF)))
print(lgUnqValF<-length(uniqueValF))
print(unqValG<-setdiff(names(performanceG),names(tailleG)))
print(lgUnqValG<-length(uniqueValG))
print(lgUnqValG<-length(unqValG))
<-lgUnqValF+lgUnqValG
lgUnqVal
lgUnqVal=lgUnqValF+lgUnqValG
lgUnqVal
print(unqValF1<-setdiff(names(performanceF),names(tailleF)))
print(unqValF2<-setdiff(names(tailleF),names(performanceF)))#on récupère les éléments de A non présents dans B, MAIS AUSSI ensuite les éléments de B non présentes dans A
lgUnqVal
print(unqValF1<-setdiff(names(performanceF),names(tailleF)))
print(unqValF2<-setdiff(names(tailleF),names(performanceF)))#on récupère les éléments de A non présents dans B, MAIS AUSSI ensuite les éléments de B non présentes dans A
unqValF=unqValF1+unqValF2
lgUnqValF<-length(unqValF)
print(unqValF1<-setdiff(names(performanceF),names(tailleF)))
print(unqValF2<-setdiff(names(tailleF),names(performanceF)))#on récupère les éléments de A non présents dans B, MAIS AUSSI ensuite les éléments de B non présentes dans A
unqValF=unqValF1+unqValF2
unqValF<-c(unqValF1,unqValF2)
lgUnqValF<-length(unqValF)
lgUnqVal
unqValF
lgUnqValF<-length(unqValF)
lgUnqVal
print(unqValF1<-setdiff(names(performanceF),names(tailleF)))
print(unqValF2<-setdiff(names(tailleF),names(performanceF)))#on récupère les éléments de A non présents dans B, MAIS AUSSI ensuite les éléments de B non présentes dans A
unqValF<-c(unqValF1,unqValF2)
unqValF
lgUnqValF<-length(unqValF)
lgUnqValF
unqvalG1<-setdiff(names(performanceG),names(tailleG))
unqvalG2<-setdiff(names(tailleG),names(performanceG))
unqValG<-c(unqvalG1,unqvalG2)
unqValG
lgUnqValG<-length(unqValG)
lgUnqVal=lgUnqValF+lgUnqValG
lgUnqVal
lgUnqValG
names(tailleG) %in% names(performanceG)
tailleG [names(tailleG) %in% names(performanceG)]
tailleG2Tri
tailleG2Tri<-tailleG2[order(tailleG2)]
tailleG2<-tailleG[communG]
communF<-intersect(names(performanceF),names(tailleF))
print(lgCommunF<-length(communF))
communG<-intersect(names(performanceG),names(tailleG))
commun<-c(communF,communG)
print(lgCommun<-commun)
lgCommun<-commun
lgCommun
length(lgCommun)
length(communF)
length(communG)
length(lgCommun)
names(tailleG) %in% names(performanceG) #x %in% y => renvoie les booléesn des éléments de x communs avec y
tailleG [names(tailleG) %in% names(performanceG)]#retourne les valeurs en commun
tailleG2<-tailleG[communG]
performanceG2<-performanceG[communG]
tailleG2
performanceG2
tailleG2Tri<-tailleG2[order(tailleG2)]
tailleG2Tri
performanceG2Tri<-performanceG2[order(performanceG2)]
performanceG2Tri
cor(tailleG2Tri,performanceG2Tri)#pour utiliser fonction cor, il faut vecteur de valeurs numériques de même longueur ET avec données réciproques
cor(tailleG2,performanceG2)#pour utiliser fonction cor, il faut vecteur de valeurs numériques de même longueur ET avec données réciproques
lm(performanceG2,tailleG2)
lm(performanceG2~tailleG2)
